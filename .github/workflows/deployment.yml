name: Build & push to AWS ECR and Deploy to AWS EKS

on:
  push:
    branches: 
      - master
env:
  ECR_REPOSITORY: springboot
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  DEPLOYMENT_NAME: java
  NAMESPACE: java
  PROJECT: springboot
  ENVIRONMENT: dev
  EKS_CLUSTER_NAME: eks-cluster-app-dev

jobs:
  detect-changes:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  build-push:
    needs: detect-changes
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      build_number: ${{ steps.tag.outputs.build_number }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.DEV_AWS_ROLE_ARN }}"
          role-session-name: assume-role-github-integration
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Generate Build Number and Image Tag
        id: tag
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          BUILD_NUMBER=$(date +%s)
          echo "image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push images to Amazon ECR
        run: |

            echo "Building Docker image"
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.image_tag }} .

            echo "Pushing Docker image for service: $service"
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.image_tag }}

  deploy:
    needs: [detect-changes, build-push]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.DEV_AWS_ROLE_ARN }}"
          role-session-name: assume-role-github-integration
          aws-region: us-east-1
# Installation Required Packages
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version    
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.31.1/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client 
      - name: Install Helm
        run: |
          curl -LO "https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
          tar -xvf  helm-v3.12.0-linux-amd64.tar.gz
          sudo mv linux-amd64  /usr/local/bin
          helm version
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region us-east-1
      - name: Deploy to Kubernetes
        run: |
          # Run any Kubernetes deployment commands here

          IMAGE_TAG=${{ needs.build-push.outputs.image_tag }}
          BUILD_NUMBER=${{ needs.build-push.outputs.build_number }}
          echo "Deploying image with tag: $IMAGE_TAG and build number: $BUILD_NUMBER"
          sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" charts/templates/deployment.yml

          helm install java charts/
          #sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8/deployment.yml
          # kubectl apply -f k8/ --namespace=$NAMESPACE
          kubectl rollout restart deployment $DEPLOYMENT_NAME  --namespace=$NAMESPACE

     
       # Verify Deployment and Rollback in Case of Failure
      #- name: Verify deployment
      #  run: |
      #    kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n default
      #    if [ $? -ne 0 ]; then
      #      kubectl rollout undo deployment/${{ env.DEPLOYMENT_NAME }} -n default
      #      exit 1
      #    fi
